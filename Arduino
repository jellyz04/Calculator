#include <LiquidCrystal.h>

int i = 0;
String buttonPressed;
String expression = "";
String calculation[10];
String midResult[10][2];
const int rs = 13, en = 12, d4 = 5, d5 = 4, d6 = 3, d7 = 2;
LiquidCrystal lcd(rs, en, d4, d5, d6, d7);
#define button1     11
#define button2     10
#define button3     9
#define button4     8
#define buttonShift 6

void setup() {
  lcd.begin(16, 2);
  lcd.clear();
  Serial.begin(9600);
}

void loop() {
  lcd.setCursor(0, 0);
  while(true) {
    buttonPressed = character();
    lcd.print(buttonPressed);
    expression += buttonPressed;
//    Serial.print(expression+'\n');
    delay(500);
    i++;
    if((i==15) || (buttonPressed == "=")) {
      break;
    }
  }

  String operation[10][2];
  String num = "";
  int lstI = 0;
  for (int i=0; i<expression.length(); i++) {
    if (isalpha(expression.charAt(i)) != 0) {
    }
    else{
      if (isdigit(expression.charAt(i)) != 0 || expression.charAt(i) == '.'){
        num += expression.substring(i,i+1);
        if (expression.charAt(i-1) == '-'){
          if (expression.charAt(i-2) == '+' || expression.charAt(i-2) == '-' || expression.charAt(i-2) == '*' || expression.charAt(i-2) == '/' || expression.charAt(0) == '-'){
            num = "-" + num;
          }
        }
      }
        else{
          if (expression.charAt(i-1) == '+' || expression.charAt(i-1) == '-' || expression.charAt(i-1) == '*' || expression.charAt(i-1) == '/' || expression.charAt(0) == '-'){
            if (expression.charAt(i) == '-'){
              continue;
            }
          }
          else{
            operation[lstI][0] = num;
            operation[lstI][1] = expression.substring(i,i+1);
            lstI++;
            num = "";
          }
        }
      }
    }
  
  lcd.setCursor(0,1);

//  for (int a = 0; !operation[a-1][1].equals("="); a++){
//    for (int b = 0; b<2; b++){
//      Serial.print(operation[a][b]);
//    }
//    Serial.print("    ");
//  }
//  Serial.print('\n');

  Serial.print(calculate(operation));
  lcd.print(calculate(operation));
  if (character() != ""){
    expression = "";
    lcd.clear();
    delay(500);
  }
}

String character() {
  while(true) {
    if(LOW == digitalRead(buttonShift)) {
      if(LOW == digitalRead(button1)) {
        return "+";
      }
      if(LOW == digitalRead(button2)) {
        return "-";
      }
      if(LOW == digitalRead(button3)) {
        return "*";
      }
      if(LOW == digitalRead(button4)) {
        return "/";
      }
    }
    if(LOW == digitalRead(button1)) {
      return "1";
    }
    if(LOW == digitalRead(button2)) {
      return "2";
    }
    if(LOW == digitalRead(button3)) {
      return "3";
    }
    if(LOW == digitalRead(button4)) {
      return "=";
    }
  }
  return "";
}

double calculate(String lst[][2]){
  int i = 0;
  while (!lst[i-1][1].equals("=")){
    if (lst[i][1].equals("+") || lst[i][1].equals("-") || lst[i][1].equals("=")){
      midResult[i][0] = lst[i][0];
      midResult[i][1] = lst[i][1];
    }
    else if (lst[i][1].equals("*")){
      int num = lst[i][0].toInt()*lst[i+1][0].toInt();
      midResult[i][0] = String(num);
      midResult[i][1] = lst[i+1][1];
      for (int j = i+1; j<10; j++){
        midResult[j][0] = lst[j+1][0];
        midResult[j][1] = lst[j+1][1];
      }
      calculate(midResult);
    }
    else if (lst[i][1].equals("/")){
      double num = lst[i][0].toDouble()/lst[i+1][0].toDouble();
      midResult[i][0] = String(num);
      midResult[i][1] = lst[i+1][1];
      for (int j = i+1; j<10; j++){
        midResult[j][0] = lst[j+1][0];
        midResult[j][1] = lst[j+1][1];
      }
      calculate(midResult);
    }
    i++;
  }
  lst = midResult;

  i = 0;
  while (!lst[i-1][1].equals("=")){
    if (lst[i][1].equals("+")){
      int num = lst[i][0].toInt()+lst[i+1][0].toInt();
      midResult[i][0] = String(num);
      midResult[i][1] = lst[i+1][1];
      for (int j = i+1; j<10; j++){
        midResult[j][0] = lst[j+1][0];
        midResult[j][1] = lst[j+1][1];
      }
      calculate(midResult);
    }
    
    else if (lst[i][1].equals("-")){
      double num = lst[i][0].toDouble()-lst[i+1][0].toDouble();
      midResult[i][0] = String(num);
      midResult[i][1] = lst[i+1][1];
      for (int j = i+1; j<10; j++){
        midResult[j][0] = lst[j+1][0];
        midResult[j][1] = lst[j+1][1];
      }
      calculate(midResult);
    }
    i++;
  }
  return midResult[0][0].toDouble();
}
